/**
 * @fileoverview Firestore Security Rules for the Quiz Application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access for quizzes and questions.  All write operations
 * require authentication, and data validation is limited to relational integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles, accessible only to the user.
 * - /quizzes/{quizId}: Stores publicly readable quiz definitions.
 * - /quizzes/{quizId}/questions/{questionId}: Stores questions for each quiz.
 * - /users/{userId}/quiz_attempts/{quizAttemptId}: Stores user-specific quiz attempts.
 * - /users/{userId}/quiz_attempts/{quizAttemptId}/attempt_answers/{attemptAnswerId}: Stores answers for quiz attempts.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed to protect user privacy.
 * - Quizzes and Questions are publicly readable.
 * - All write operations require authentication and ownership validation.
 * - Denormalization: The `AttemptAnswer` documents contain a `quizAttemptId` field
 *   for authorization independence, allowing security rules to validate the parent
 *   `quizAttempt` without requiring extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if the user is signed in and their UID matches the userId in the path.
     * @deny (create, update, delete, get, list) if the user is not signed in or the UID does not match the userId in the path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing user listing for privacy.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to quizzes. Write access is not permitted in this prototype.
     * @path /quizzes/{quizId}
     * @allow (get, list) Public read access to quizzes.
     * @deny (create, update, delete) No write access allowed for non-admins in this prototype.
     * @principle Public read access with restricted writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }

    /**
     * @description Allows public read access to questions under a specific quiz.  Write access is not permitted in this prototype.
     * @path /quizzes/{quizId}/questions/{questionId}
     * @allow (get, list) Public read access to quiz questions.
     * @deny (create, update, delete) No write access allowed for non-admins in this prototype.
     * @principle Public read access with restricted writes.
     */
    match /quizzes/{quizId}/questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }

    /**
     * @description Secure access to quiz attempts. Only the user can read and write their own quiz attempts.
     * @path /users/{userId}/quiz_attempts/{quizAttemptId}
     * @allow (create, update, delete, get, list) if the user is signed in and their UID matches the userId in the path.
     * @deny (create, update, delete, get, list) if the user is not signed in or the UID does not match the userId in the path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_attempts/{quizAttemptId} {
      // Function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return request.auth != null && request.auth.uid == userId && resource != null;
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to attempt answers. Only the user can read and write their own attempt answers.
     * @path /users/{userId}/quiz_attempts/{quizAttemptId}/attempt_answers/{attemptAnswerId}
     * @allow (create, update, delete, get, list) if the user is signed in and their UID matches the userId in the path.
     * @deny (create, update, delete, get, list) if the user is not signed in or the UID does not match the userId in the path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_attempts/{quizAttemptId}/attempt_answers/{attemptAnswerId} {
      // Function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return request.auth != null && request.auth.uid == userId && resource != null;
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(userId)/quiz_attempts/$(quizAttemptId)).data.exists == true;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}